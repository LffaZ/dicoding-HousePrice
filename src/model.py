# -*- coding: utf-8 -*-
"""HousePrice_DCD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KLywnu3VJyBVMHpIjCEFnGqDjhUv6GDp
"""

import os
import json

# Baca kredensial dari file JSON
# with open('kaggle.json', 'r') as f:
#     userdata = json.load(f)

# # Mengatur variabel lingkungan
# os.environ["KAGGLE_USERNAME"] = userdata.get('username')
# os.environ["KAGGLE_KEY"] = userdata.get('key')

"""## Data Collecting"""

from kaggle.api.kaggle_api_extended import KaggleApi
import zipfile

# Menyiapkan API dan login
api = KaggleApi()
api.authenticate()

# Mendownload dataset kompetisi
competition_name = 'house-prices-advanced-regression-techniques'
api.competition_download_files(competition_name, path='./')

# Mengekstrak file ZIP yang telah diunduh
zip_file = f'{competition_name}.zip'

# Membuat folder 'data' jika belum ada
os.makedirs('data', exist_ok=True)

with zipfile.ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall('./data')  # Ekstrak ke folder data
    print(f"Files extracted to: {os.path.join(os.getcwd(), 'data')}")

# Menghapus file ZIP setelah ekstraksi selesai
if os.path.exists(zip_file):
    os.remove(zip_file)
    print(f"Deleted the zip file: {zip_file}")

"""## Data Loading"""

import pandas as pd
test = pd.read_csv("test.csv")
test.head()

train = pd.read_csv("train.csv")
train.head()

"""## Data Cleaning & Transformation"""

train.info()

train.describe(include="all")

"""### Missing Value"""

missing_values = train.isnull().sum()
missing_values[missing_values > 0]

less = missing_values[missing_values < 1000].index
over = missing_values[missing_values >= 1000].index

# fill num features with median
numeric_features = train[less].select_dtypes(include=['number']).columns
train[numeric_features] = train[numeric_features].fillna(train[numeric_features].median())
# fill category features with mode
kategorical_features = train[less].select_dtypes(include=['object']).columns

for column in kategorical_features:
    train[column] = train[column].fillna(train[column].mode()[0])

df = train.drop(columns=over)
missing_values = df.isnull().sum()
missing_values[missing_values > 0]

"""### Outliers"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

for feature in numeric_features:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[feature])
    plt.title(f'Box Plot of {feature}')
    # plt.show()

# check outliers with iqr
Q1 = df[numeric_features].quantile(0.25)
Q3 = df[numeric_features].quantile(0.75)
IQR = Q3 - Q1

condition = ~((df[numeric_features] < (Q1 - 1.5 * IQR)) | (df[numeric_features] > (Q3 + 1.5 * IQR))).any(axis=1)
df_filtered_numeric = df.loc[condition, numeric_features]

# Menggabungkan kembali dengan kolom kategorikal
categorical_features = df.select_dtypes(include=['object']).columns
df = pd.concat([df_filtered_numeric, df.loc[condition, categorical_features]], axis=1)

"""hapus outliers dengan aggregasi sep

```
median = df['column_name'].median()
df['column_name'] = df['column_name'].apply(lambda x: median if x < (Q1 - 1.5  IQR) or x > (Q3 + 1.5  IQR) else x)
```
atau
```
# Mengganti outlier dengan nilai batas terdekat
df['column_name'] = df['column_name'].apply(lambda x: (Q1 - 1.5  IQR) if x < lower_bound else (Q3 + 1.5  IQR) if x > (Q3 + 1.5 * IQR) else x)
```

### Feature Scaling
"""

# Normalization vs standardization
from sklearn.preprocessing import StandardScaler

# Standardisasi fitur numerik
scaler = StandardScaler()
df[numeric_features] = scaler.fit_transform(df[numeric_features])

# Before standardization
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.histplot(train[numeric_features[3]], kde=True)
plt.title("Histogram Sebelum Standardisasi")

# After standardization
plt.subplot(1, 2, 2)
sns.histplot(df[numeric_features[3]], kde=True)
plt.title("Histogram Setelah Standardisasi")

"""### Duplicate Value"""

duplicates = df.duplicated()

print("Baris duplikat:")
print(df[duplicates])

# If there's duplicated data
df = df.drop_duplicates()

print("DataFrame setelah menghapus duplikat:")
print(df)

"""### Encoding"""

category_features = df.select_dtypes(include=['object']).columns
df[category_features]

# one hot encoding
df_one_hot = pd.get_dummies(df, columns=category_features)
df_one_hot

# label encoding
from sklearn.preprocessing import LabelEncoder

# Inisialisasi LabelEncoder
label_encoder = LabelEncoder()
df_lencoder = pd.DataFrame(df)

for col in category_features:
    df_lencoder[col] = label_encoder.fit_transform(df[col])

# Menampilkan hasil
df_lencoder

"""perbedaan kedua encoding tersebut terletak pada jumlah kolomnya. one hot encoding menyimpan value dengan memecah suatu fitur menjadi fitur baru dengan struktur “namakolom_value”. sementara label encoding hanya merubah nilai tanpa membuat fitur baru dari kategori yg di encoding. check more about the differences [here](https://www.dicoding.com/academies/184/tutorials/8330?from=8342#:~:text=konteks%20penggunaannya.%20Simak-,kelebihan%20dan%20kekurangan,-dari%20masing%2Dmasing)

## EDA
"""

# pakai data yg menggunakan label encoder karena keterbatasan memori kl ga salah
df_lencoder.head()

missing_values = df_lencoder.isnull().sum()
missing_percentage = (missing_values / len(df_lencoder)) * 100

missing_data = pd.DataFrame({
    'Missing Values': missing_values,
    'Percentage': missing_percentage
}).sort_values(by='Missing Values', ascending=False)

missing_data[missing_data['Missing Values'] > 0]

# Menghitung jumlah variabel
num_vars = df_lencoder.shape[1]

# Menentukan jumlah baris dan kolom untuk grid subplot
n_cols = 4  # Jumlah kolom yang diinginkan
n_rows = -(-num_vars // n_cols)  # Ceiling division untuk menentukan jumlah baris

# Membuat subplot
fig, axes = plt.subplots(n_rows, n_cols, figsize=(20, n_rows * 4))

# Flatten axes array untuk memudahkan iterasi jika diperlukan
axes = axes.flatten()

# Plot setiap variabel
for i, column in enumerate(df_lencoder.columns):
    df_lencoder[column].hist(ax=axes[i], bins=20, edgecolor='black')
    axes[i].set_title(column)
    axes[i].set_xlabel('Value')
    axes[i].set_ylabel('Frequency')

# Menghapus subplot yang tidak terpakai (jika ada)
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

# Menyesuaikan layout agar lebih rapi
plt.tight_layout()
# plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Visualisasi distribusi data untuk beberapa kolom
columns_to_plot = ['OverallQual', 'YearBuilt', 'LotArea', 'SaleType', 'SaleCondition']

plt.figure(figsize=(15, 10))
for i, column in enumerate(columns_to_plot, 1):
    plt.subplot(2, 3, i)
    sns.histplot(df_lencoder[column], kde=True, bins=30)
    plt.title(f'Distribution of {column}')

plt.tight_layout()
# plt.show()

# Visualisasi korelasi antar variabel numerik
plt.figure(figsize=(12, 10))
correlation_matrix = df_lencoder.corr()

sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
# plt.show()

# Menghitung korelasi antara variabel target dan semua variabel lainnya
target_corr = df_lencoder.corr()['SalePrice']

# (Opsional) Mengurutkan hasil korelasi berdasarkan korelasi
target_corr_sorted = target_corr.abs().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
target_corr_sorted.plot(kind='bar')
plt.title(f'Correlation with SalePrice')
plt.xlabel('Variables')
plt.ylabel('Correlation Coefficient')
# plt.show()

"""## Data splitting

training lebih besar dari testing. check more method [here](https://www.dicoding.com/academies/184/tutorials/38678?from=38673#:~:text=perhatikan%20tabel%20berikut)
"""

import sklearn

X = df_lencoder.drop(columns=['SalePrice'])
y = df_lencoder['SalePrice']

from sklearn.model_selection import train_test_split

# membagi dataset menjadi training dan testing
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

print("Jumlah data: ",len(X))
# menghitung panjang/jumlah data pada x_test
print("Jumlah data latih: ",len(x_train))
# menghitung panjang/jumlah data pada x_test
print("Jumlah data test: ",len(x_test))

"""## Modelling

### Training
"""

from sklearn import linear_model
lars = linear_model.Lars(n_nonzero_coefs=1).fit(x_train, y_train)

# Melatih model 2 dengan algoritma Linear Regression
from sklearn.linear_model import LinearRegression
LR = LinearRegression().fit(x_train, y_train)

# Melatih model 3 dengan algoritma Gradient Boosting Regressor
from sklearn.ensemble import GradientBoostingRegressor
GBR = GradientBoostingRegressor(random_state=184)
GBR.fit(x_train, y_train)

"""### Evaluation

#### LAR (Least Angle Regression)
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Evaluasi pada model LARS
pred_lars = lars.predict(x_test)
mae_lars = mean_absolute_error(y_test, pred_lars)
mse_lars = mean_squared_error(y_test, pred_lars)
r2_lars = r2_score(y_test, pred_lars)

# Membuat dictionary untuk menyimpan hasil evaluasi
data = {
    'MAE': [mae_lars],
    'MSE': [mse_lars],
    'R2': [r2_lars]
}

# Konversi dictionary menjadi DataFrame
df_results = pd.DataFrame(data, index=['Lars'])
df_results

"""#### LR (Linear Regression)"""

# Evaluasi pada model Linear Regression
pred_LR = LR.predict(x_test)
mae_LR = mean_absolute_error(y_test, pred_LR)
mse_LR = mean_squared_error(y_test, pred_LR)
r2_LR = r2_score(y_test, pred_LR)

# Menambahkan hasil evaluasi LR ke DataFrame
df_results.loc['Linear Regression'] = [mae_LR, mse_LR, r2_LR]
df_results

"""#### GBR (Gradient Boosting Regressor)"""

# Evaluasi pada model GBR
pred_GBR = GBR.predict(x_test)
mae_GBR = mean_absolute_error(y_test, pred_GBR)
mse_GBR = mean_squared_error(y_test, pred_GBR)
r2_GBR = r2_score(y_test, pred_GBR)

# Menambahkan hasil evaluasi LR ke DataFrame
df_results.loc['GradientBoostingRegressor'] = [mae_GBR, mse_GBR, r2_GBR]
df_results

"""### Save Model"""

# Joblib
import joblib

joblib.dump(GBR, 'models/gbr_model.joblib')

# Pickle
import pickle

with open('models/gbr_model.pkl', 'wb') as file:
    pickle.dump(GBR, file)

"""## Deploy"""

# Memuat model dari file joblib
joblib_model = joblib.load('models/gbr_model.joblib')

# Memuat model dari file pickle
with open('models/gbr_model.pkl', 'rb') as file:
    pickle_model = pickle.load(file)


